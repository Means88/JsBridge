{"version":3,"sources":["WebViewJavascriptBridge.js"],"names":[],"mappings":"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","file":"WebViewJavascriptBridge.build.js","sourcesContent":["//notation: js file can only use this kind of comments\n//since comments will cause error when use in webview.loadurl,\n//comments will be remove by java use regexp\nif (!window.WebViewJavascriptBridgeClass) {\n\n  class WebViewJavascriptBridgeClass {\n\n    constructor(options) {\n      this.messagingIframe = null;\n      this.sendMessageQueue = [];\n      this.receiveMessageQueue = [];\n      this.messageHandlers = {};\n      this.responseCallbacks = {};\n      this.uniqueId = 1;\n\n      this.CUSTOM_PROTOCOL_SCHEMA = options.CUSTOM_PROTOCOL_SCHEMA || 'schema';\n      this.QUEUE_HAS_MESSAGE = options.QUEUE_HAS_MESSAGE || '__QUEUE_MESSAGE__/';\n      \n      setTimeout(() => {\n        this._createQueueReadyIframe(document);\n        var readyEvent = document.createEvent('Events');\n        readyEvent.initEvent('WebViewJavascriptBridgeReady');\n        readyEvent.bridge = this;\n        document.dispatchEvent(readyEvent);\n      });\n    }\n\n    _createQueueReadyIframe(doc) {\n      this.messagingIframe = doc.createElement('iframe');\n      this.messagingIframe.style.display = 'none';\n      doc.documentElement.appendChild(this.messagingIframe);\n    };\n\n    //set default messageHandler\n    init(messageHandler) {\n      if (this._messageHandler) {\n        throw new Error('WebViewJavascriptBridge.init called twice');\n      }\n\n      this._messageHandler = messageHandler;\n      let receivedMessages = this.receiveMessageQueue;\n      this.receiveMessageQueue = null;\n      for (let i = 0; i < receivedMessages.length; i++) {\n        this._dispatchMessageFromNative(receivedMessages[i]);\n      }\n    }\n\n    send(data, responseCallback) {\n      this._doSend({\n        data: data\n      }, responseCallback);\n    }\n\n    registerHandler(handlerName, handler) {\n      this.messageHandlers[handlerName] = handler;\n    }\n\n    callHandler(handlerName, data, responseCallback) {\n      this._doSend({\n        handlerName: handlerName,\n        data: data\n      }, responseCallback);\n    }\n\n    //sendMessage add message, 触发native处理 sendMessage\n    _doSend(message, responseCallback) {\n      if (responseCallback) {\n        const callbackId = 'cb_' + (this.uniqueId++) + '_' + new Date().getTime();\n        this.responseCallbacks[callbackId] = responseCallback;\n        message.callbackId = callbackId;\n      }\n\n      this.sendMessageQueue.push(message);\n      this.messagingIframe.src = this.CUSTOM_PROTOCOL_SCHEMA + '://' + this.QUEUE_HAS_MESSAGE;\n    }\n\n    // 提供给native调用,该函数作用:获取sendMessageQueue返回给native,由于android不能直接获取返回的内容,所以使用url shouldOverrideUrlLoading 的方式返回内容\n    _fetchQueue() {\n      const messageQueueString = JSON.stringify(this.sendMessageQueue);\n      this.sendMessageQueue = [];\n      //android can't read directly the return data, so we can reload iframe src to communicate with java\n      this.messagingIframe.src = this.CUSTOM_PROTOCOL_SCHEMA + '://return/_fetchQueue/' + encodeURIComponent(messageQueueString);\n    }\n\n    //提供给native使用,\n    _dispatchMessageFromNative(messageJSON) {\n      const doSend = this._doSend;\n      setTimeout(() => {\n        const message = JSON.parse(messageJSON);\n        let responseCallback;\n        //java call finished, now need to call js callback function\n        if (message.responseId) {\n          responseCallback = this.responseCallbacks[message.responseId];\n          if (!responseCallback) {\n            return;\n          }\n          responseCallback(message.responseData);\n          delete this.responseCallbacks[message.responseId];\n        } else {\n          //直接发送\n          if (message.callbackId) {\n            const callbackResponseId = message.callbackId;\n            responseCallback = function (responseData) {\n              doSend({\n                responseId: callbackResponseId,\n                responseData: responseData\n              });\n            };\n          }\n\n          let handler = this._messageHandler;\n          if (message.handlerName) {\n            handler = this.messageHandlers[message.handlerName];\n          }\n          //查找指定handler\n          try {\n            handler(message.data, responseCallback);\n          } catch (exception) {\n            if (typeof console != 'undefined') {\n              console.log(\"WebViewJavascriptBridge: WARNING: javascript handler threw.\" + message.data + exception);\n            }\n          }\n        }\n      });\n    }\n\n    //提供给native调用,receiveMessageQueue 在会在页面加载完后赋值为null,所以\n    _handleMessageFromNative(messageJSON) {\n      console.log(messageJSON);\n      if (this.receiveMessageQueue && this.receiveMessageQueue.length > 0) {\n        this.receiveMessageQueue.push(messageJSON);\n      } else {\n        this._dispatchMessageFromNative(messageJSON);\n      }\n    }\n  }\n\n  window.WebViewJavascriptBridgeClass = WebViewJavascriptBridgeClass;\n}"]}